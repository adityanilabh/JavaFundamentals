What is Generic? why use generics?
Generics means parameterized types. The idea is to allow type 
(Integer, String, â€¦ etc., and user-defined types) to be a parameter to methods, 
classes, and interfaces. Using Generics, it is possible to create classes that work 
with different data types. An entity such as class, interface, or method that operates 
on a parameterized type is a generic entity.

--Why Generics:    TYPE SAFETY;
The Object is the superclass of all other classes, and Object reference can 
refer to any object. These features lack type safety. Generics add that type of 
safety feature. We will discuss that type of safety feature in later examples.
---------------------------------------------------------------------------
all the wrapper class are made with generic data tyeps.
==========================================================================

TYPE SAFETY IN JAVA GENERICS: Type Safety: With generics, 
you can write code that is both flexible and type-safe. Type safety ensures that 
you catch type-related errors at compile time rather than at runtime.
============================================================================
==========================================================================
===========================================================================


Understand the Basics:

Need for Generics:

Before the introduction of generics in Java (prior to Java 5), collections like List, Set, and Map could store elements of any type. This flexibility, however, led to potential runtime errors when retrieving elements, as the type information was lost.
For example, a List could store both String and Integer objects, and when retrieving an element, it required explicit casting, which could result in ClassCastException errors if the casting was incorrect.
Type Safety:

Generics were introduced to address the need for type safety. With generics, you can specify the type of elements that a collection or class will work with, and the compiler ensures that only elements of the specified type can be used.
This type safety is enforced at compile time, allowing developers to catch type-related errors early in the development process.
Example:
=========================================
Without Generics (pre-Java 5):


List myList = new ArrayList();
myList.add("Hello");
Integer value = (Integer) myList.get(0); // Runtime error: ClassCastException
=================================================================================

In this example, we store a String in a raw List, and when attempting to retrieve it as an Integer, a ClassCastException occurs at runtime due to the absence of type information.
============================================================
With Generics (Java 5 and later):


List<String> myGenericList = new ArrayList<>();
myGenericList.add("Hello");
String greeting = myGenericList.get(0); // No type-casting needed, and it's type-safe
======================================================================
In this example, we use a generic List<String> where the type is specified. 
The compiler ensures that only String elements can be added, eliminating 
the need for explicit casting and providing type safety.

Learning Approach:

Recognizing Scenarios: Look for scenarios in your code where collections 
or classes deal with multiple types of data. Consider how using generics 
can enhance type safety and code clarity.

Practice Examples: Practice writing code snippets that demonstrate the 
issues of type safety in pre-generic code and the benefits of using generics. 
Experiment with different scenarios to solidify your understanding.
